import "/path/to/include.stax"
import <corelib>
import proc1 proc2 from "library"

// Generate macro with the name Name that takes 
//  an InputTypes and returns an OutputTypes
macro Name : InputTypes > OutputTypes {
    InnerTokens
    if 1 2 + 3 = then {

    } else {

    }

}

macro stdout > int {1}
// Same as `macro stdout :> int {1}`
macro SYS_WRITE > int {1}

// String on top and int under
macro print : string int {
    stdout SYS_WRITE syscall3
}

macro PI > float {
    3.14159268
}

macro add : int int > int {
    // Variable Declaration
    let x = {
        // Requires 1 return value
        1 2 +
    }
    x putd // Should print 3
    // Update value in x
    8 x !

    x putd // Should print 8

    // Holds top 2 values in stack
    //  as easily accessible
    with a b {
        a b +
    }
}

// Can skip : and > if takes nothing and returns nothing
macro noop {
    // Comment
}

proc main {

}